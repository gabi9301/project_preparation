{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nconst useHttp = (requestConfig, applyData) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = async taskText => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method ? requestConfig.method : \"GET\",\n        headers: requestConfig.headers ? requestConfig.headers : {},\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Request failed!\");\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (err) {\n      setError(err.message || \"Something went wrong!\");\n    }\n\n    setIsLoading(false);\n  };\n\n  return {\n    isLoading: isLoading,\n    error: error,\n    sendRequest: sendRequest\n  };\n};\n\n_s(useHttp, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");\n\nexport default useHttp;","map":{"version":3,"sources":["C:/Users/seanl/Desktop/project_preparation/react_complete_guide/Section_15/custom_hooks_more_realistic/src/hooks/use-http.js"],"names":["useState","useHttp","requestConfig","applyData","isLoading","setIsLoading","error","setError","sendRequest","taskText","response","fetch","url","method","headers","body","JSON","stringify","ok","Error","data","json","err","message"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,OAAO,GAAG,CAACC,aAAD,EAAgBC,SAAhB,KAA8B;AAAA;;AAAE,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AAChD,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;;AAEA,QAAMQ,WAAW,GAAG,MAAOC,QAAP,IAAoB;AACtCJ,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAACT,aAAa,CAACU,GAAf,EAAoB;AAC9CC,QAAAA,MAAM,EAAEX,aAAa,CAACW,MAAd,GAAuBX,aAAa,CAACW,MAArC,GAA8C,KADR;AAE9CC,QAAAA,OAAO,EAAEZ,aAAa,CAACY,OAAd,GAAwBZ,aAAa,CAACY,OAAtC,GAAgD,EAFX;AAG9CC,QAAAA,IAAI,EAAEb,aAAa,CAACa,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAef,aAAa,CAACa,IAA7B,CAArB,GAA0D;AAHlB,OAApB,CAA5B;;AAMA,UAAI,CAACL,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAlB,MAAAA,SAAS,CAACiB,IAAD,CAAT;AAGD,KAfD,CAeE,OAAOE,GAAP,EAAY;AACZf,MAAAA,QAAQ,CAACe,GAAG,CAACC,OAAJ,IAAe,uBAAhB,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAtBD;;AAwBC,SAAO;AACJD,IAAAA,SAAS,EAACA,SADN;AAEJE,IAAAA,KAAK,EAAEA,KAFH;AAGJE,IAAAA,WAAW,EAAEA;AAHT,GAAP;AAMA,CAjCD;;GAAMP,O;;AAmCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react';\r\n\r\nconst useHttp = (requestConfig, applyData) => { const [isLoading, setIsLoading] = useState(false);\r\nconst [error, setError] = useState(null);\r\n\r\nconst sendRequest = async (taskText) => {\r\n  setIsLoading(true);\r\n  setError(null);\r\n  try {\r\n    const response = await fetch(requestConfig.url, {\r\n      method: requestConfig.method ? requestConfig.method : \"GET\",\r\n      headers: requestConfig.headers ? requestConfig.headers : {},\r\n      body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Request failed!\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    applyData(data);\r\n\r\n    \r\n  } catch (err) {\r\n    setError(err.message || \"Something went wrong!\");\r\n  }\r\n  setIsLoading(false);\r\n};\r\n\r\n return {\r\n    isLoading:isLoading,\r\n    error: error,\r\n    sendRequest: sendRequest\r\n };\r\n\r\n};\r\n\r\nexport default useHttp;\r\n"]},"metadata":{},"sourceType":"module"}