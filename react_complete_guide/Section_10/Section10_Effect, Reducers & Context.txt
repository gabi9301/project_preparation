Section10. Effect, Reducers & Context

---useEffect hook------------------------------------------------------------------------------------------------

- Working with (Side) effects
- Managing more complex state with reducers
- Managing app-wide or component-wide state with context

React가 수행하는 주요 역할은 UI 렌더링과 사용자의 입력에 대응하는 것
(ex. useState(), Hook, Props etc)



Side Effects는 그 외의 역할을 의미한다.
(브라우저 스토리지에 데이터를 저장하거나 백엔드 서버에 Http 요청을 보내거나 타이머를 설정하는 등을 포함) 
그리고 해당 역할들은 컴포넌트 함수 밖에서 실행되어야 한다.
Http 요청을 예로 들자면 만약 이 과정이 렌더링 함수 내에서 실행될 경우
함수가 실행될 때마다 Http 요청을 보내게되고 이에 대한 응답으로 컴포넌트의 state가 변화된다면 다시 그에 따라 새로운 렌더링을 위해 해당 함수가 재실행되는 무한루프가 만들어질수도 있다.

그러므로 Side Effects를 다룰 땐 useEffect() Hook을 사용한다.

useEffect(() => { ... }, [ dependencies ]);

해당 Hook의 두 가지 인자는 'dependencies 배열'와 'dependencies가 바뀔 때마다 실행되는 함수' 이다. (side effect 코드는 함수 쪽에 작성한다.)
해당 함수는 컴포넌트가 렌더링되는 시점이 아니라 작성한 dependencies가 바뀌는 시점에만 실행된다.

useEffect의 dependencies를 [] 빈 배열로 지정하면 마운트 시 한 번만 함수 실행
아무것도 넣지 않으면 해당 컴포넌트가 렌더링 될 때마다 함수 실행
dependencies를 넣으면 마운트 시점과 지정한 값이 업데이트 될 때마다 함수 실행

useEffect는 함수를 반환할 수 있는데 이를 cleanup 함수라고 부른다.
cleanup 함수는 컴포넌트가 리렌더링된 이후에 실행된다.

props,state 업데이트 -> 컴포넌트 리렌더링 -> 이전 이펙트 cleanup 함수 실행 -> 새로운 이펙트 실행


---useReducer hook------------------------------------------------------------------------------------------------

useReducer hook은 보다 복잡한 state를 다룰 때 사용한다.
(ex. 다른 state에 의존적인 state를 업데이트할 때)

const [state, dispatchFn] = useReducer(reducerFn, initialState, initFn);

useReducer는 두 개의 값을 배열로 반환한다.

첫 번째는 가장 최근의 state 스냅샷, 두 번째는 해당 스냅샷을 업데이트할 수 있는 함수

useReducer hook의 인자인 reducerFn은 액션이 발생할 때 리액트에 의해 
자동으로 호출되며 가장 최근의 state 스냅샷을 받고 새롭게 업데이트된 state를 반환한다.


---React Context API---------------------------------------------------------------------------
React의 컴포넌트는 상태와 속성을 상하의 부모자식 관계에서만 전달할 수 있다.
즉 하나의 속성을 다른 컴포넌트에게 전달하려면 공통의 부모를 찾을 때까지
거슬러 올라가야 한다.

이 때문에 코드가 필요 이상으로 복잡해지고 해당 속성이 필요하지 않은 컴포넌트까지도
속성을 가지게 된다면 Context API 사용을 고려해야 한다.

context를 생성한 후에는 이를 다른 컴포넌트에 제공해야 한다.
이는 context를 제공하고 싶은 컴포넌트의 JSX 코드를 context로 감싸는 방식으로 작동한다.

JSX 코드를 감쌀 땐 React.createContext() 를 통해 반환받은 값에 . 연산자를 사용해 Provider를 부른다.
이 때, Provider 가 하나의 컴포넌트가 된다.

이렇게 context를 설정하면 둘러싸인 컴포넌트들과 해당 컴포넌트들의 후손들은 모두 context에 접근 가능하다.

---React Dynamic Context----------------------------------------------------------------------
context를 통해 전달할 수 있는 값에는 단순 속성 뿐만 아니라 함수도 포함된다.
context에 설정된 함수는 접근이 허용된 모든 컴포넌트가 사용할 수 있다.

props vs context
대부분의 경우 데이터를 컴포넌트 간에 옮길 때 props를 사용한다.
이유는 context를 사용할 경우 특정 이벤트가 발생했을 때 실행되는 함수에 제약이 생기기 때문이다.

예를 들어 만약 컴포넌트에 onClick = {ctx.onLogout} 라고 지정했을 때 해당 컴포넌트의 onClick 이벤트에는
onLogout 함수를 언제나 bind 하게 된다.
이 경우, 컴포넌트의 재사용성이 떨어지므로 ctx를 사용하는 것은 바람직하지 않다.

아주 많은 포워딩을 거쳐야 하거나 특정한 기능만 수행하는 컴포넌트일 때,
 context를 사용하는 편이 좋다.

---React Limitations-----------------------------------------------------------------------------
props for configuration

context for state management

React Context는 빈번하게 생기는 변화에 최적화되어있지 않다.

앱 전체나 복수의 컴포넌트에 영향을 미치는 경우 context 사용이 권장되지만

만약 동시에 빈번하게 변화가 발생한다면 이후에 다루게 될 Redux라는 기능을 사용하는 편이 좋다.

---Rules of Hooks--------------------------------------------------------------------------------

1. React Hooks는 React 함수들에서만 호출할 수 있다.

2. 최상위 계층에서만 React Hooks를 호출할 수 있다. (중첩된 항수나 블록 내에서 사용해선 안 된다.)

3. 몇몇 예외적인 상황을 제외한다면 useEffect를 사용 시 참조하는 모든 것은 언제나 useEffect() 내에 dependency로서 명시해야 한다.












 


