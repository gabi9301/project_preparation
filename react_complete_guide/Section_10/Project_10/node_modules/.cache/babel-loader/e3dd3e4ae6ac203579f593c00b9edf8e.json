{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\usre10\\\\Desktop\\\\project_preparation\\\\react_complete_guide\\\\Section_10\\\\Project_10\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  useEffect(() => {\n    const storedLoggedInInfo = localStorage.getItem('isLoggedIn');\n\n    if (storedLoggedInInfo === '1') {\n      setIsLoggedIn(true);\n    }\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    // 로그인 정보가 단순히 React의 state로 설정되어 있을 경우,\n    // 애플리케이션이 로드될 때마다 스크립트가 재실행되면서 \n    // 해당 정보는 사라진다. 즉, 페이지를 새로고침 할 때마다 로그인 정보가 초기화된다.\n    // 이같은 상황을 피하기 위해 브라우저 스토리지에 정보를 저장해보자. (리액트에 독립적인 브라우저의 로컬 스토리지)\n    localStorage.setItem('isLoggedIn', '1'); //1 =  로그인 O, 0 = 로그인 X\n\n    setIsLoggedIn(true);\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {\n      isAuthenticated: isLoggedIn,\n      onLogout: logoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [!isLoggedIn && /*#__PURE__*/_jsxDEV(Login, {\n        onLogin: loginHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), isLoggedIn && /*#__PURE__*/_jsxDEV(Home, {\n        onLogout: logoutHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"fKLMlyFH2GMrhNeUDpp+0z1yiCo=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/usre10/Desktop/project_preparation/react_complete_guide/Section_10/Project_10/src/App.js"],"names":["React","useState","useEffect","Login","Home","MainHeader","App","isLoggedIn","setIsLoggedIn","storedLoggedInInfo","localStorage","getItem","loginHandler","email","password","setItem","logoutHandler","removeItem"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,oCAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA5C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,kBAAkB,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAA3B;;AAEA,QAAGF,kBAAkB,KAAK,GAA1B,EAA+B;AAC7BD,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AAEF,GAPQ,EAON,EAPM,CAAT;;AASA,QAAMI,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC;AACA;AAGA;AACA;AACA;AACA;AAGAJ,IAAAA,YAAY,CAACK,OAAb,CAAqB,YAArB,EAAkC,GAAlC,EAXwC,CAWC;;AAEzCP,IAAAA,aAAa,CAAC,IAAD,CAAb;AAED,GAfD;;AAiBA,QAAMQ,aAAa,GAAG,MAAM;AAC1BN,IAAAA,YAAY,CAACO,UAAb,CAAwB,YAAxB;AACAT,IAAAA,aAAa,CAAC,KAAD,CAAb;AACD,GAHD;;AAKA,sBACE,QAAC,KAAD,CAAO,QAAP;AAAA,4BACE,QAAC,UAAD;AAAY,MAAA,eAAe,EAAED,UAA7B;AAAyC,MAAA,QAAQ,EAAES;AAAnD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,iBACG,CAACT,UAAD,iBAAe,QAAC,KAAD;AAAO,QAAA,OAAO,EAAEK;AAAhB;AAAA;AAAA;AAAA;AAAA,cADlB,EAEGL,UAAU,iBAAI,QAAC,IAAD;AAAM,QAAA,QAAQ,EAAES;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFjB;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;;GA3CQV,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nimport Login from './components/Login/Login';\nimport Home from './components/Home/Home';\nimport MainHeader from './components/MainHeader/MainHeader';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  useEffect(() => {\n    const storedLoggedInInfo = localStorage.getItem('isLoggedIn');\n\n    if(storedLoggedInInfo === '1') {\n      setIsLoggedIn(true);\n    }\n\n  }, []);\n\n  const loginHandler = (email, password) => {\n    // We should of course check email and password\n    // But it's just a dummy/ demo anyways\n    \n\n    // 로그인 정보가 단순히 React의 state로 설정되어 있을 경우,\n    // 애플리케이션이 로드될 때마다 스크립트가 재실행되면서 \n    // 해당 정보는 사라진다. 즉, 페이지를 새로고침 할 때마다 로그인 정보가 초기화된다.\n    // 이같은 상황을 피하기 위해 브라우저 스토리지에 정보를 저장해보자. (리액트에 독립적인 브라우저의 로컬 스토리지)\n\n\n    localStorage.setItem('isLoggedIn','1');  //1 =  로그인 O, 0 = 로그인 X\n\n    setIsLoggedIn(true);\n\n  };\n\n  const logoutHandler = () => {\n    localStorage.removeItem('isLoggedIn');\n    setIsLoggedIn(false);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader isAuthenticated={isLoggedIn} onLogout={logoutHandler} />\n      <main>\n        {!isLoggedIn && <Login onLogin={loginHandler} />}\n        {isLoggedIn && <Home onLogout={logoutHandler} />}\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}