
-객체와 테이블 매핑: @Entity, @Table

-필드와 컬럼 매핑: @Column

-기본 키 매핑: @Id

-연관관계 매핑: @ManyToOne, @JoinColumn

--------------------------------------------------------------------------------------
@Entity 가 붙은 클래스는 JPA가 관리, 엔티티라 한다.

JPA를 사용해서 테이블과 매핑할 클래스는 @Entity가 필수!

주의)
기본 생성자를 필수적으로 가져야 한다. (파라미터가 없는 public 또는 protected 생성자)

final 클래스, enum, interface, inner 클래스에선 사용할 수 없다.

저장할 필드에 final을 사용해선 안 된다.

@Entity의 속성에는 name이 있다.
해당 속성을 통해 JPA에서 사용할 엔티티 이름을 지정한다.
기본값으론 클래스의 이름을 그대로 사용한다.
만약 같은 클래스 이름이 없다면 가급적 기본값을 사용한다.

@Table 은 엔티티와 매핑할 테이블을 지정한다.
속성에는 name, catalog, schema, uniqueConstraints(DDL) 등이 있다.

name 속성은 테이블 이름을 매핑할 때 쓰이며 기본값으론 엔티티의 이름을 사용한다.
catalog는 데이터베이스 catalog를 매핑할 때,
schema는 데이터베이스 schema를 매핑할 때,
uniqueConstraints 는 DDL 생성 시에 유니크 제약 조건을 생성할 때 사용한다.

----------------------------------------------------------------------------------------
데이터베이스 스키마 생성

JPA는 애플리케이션 로딩 시점에 테이블을 자동 생성해주는 기능을 제공한다.

물론 실제 운영에 적용하기엔 부적합하지만 개발 단계나 로컬 PC 사용하면 유용하다.

적용하는 방법은 

persistence.xml에 <property name="hibernate.hbm2ddl.auto" value="create" /> 속성을 추가하는 것이다.

이렇게 하면 @Entity 어노테이션으로 지정된 클래스를 찾아 그 곳의 매핑 정보에 맞춰 테이블이 생성된다.

<옵션>
property의 value에 넣는 값 옵션

create - 기존테이블 삭제 후 다시 생성(DROP + CREATE)
create-drop - create와 같으나 종료시점에 테이블 DROP
update - 변경분만 반영(운영 DB에 사용하면 안됨)
validate - 엔티티와 테이블이 정상 매핑되었는지만 확인
none - 사용하지 않음

DDL 생성 기능을 사용할 때 제약조건을 추가할 수도 있다.

ex)@Column(nullable = false, length = 10)

물론 유니크 제약조건도 추가 가능하다.

@Table(uniqueConstraints = {@UniqueConstraint( name="NAME_AGE_UNIQUE" columnNames = {"NAME", "AGE"} )})

DDL 생성 기능은 DDL을 자동 생성할 때만 사용되며 JPA의 실행 로직에는 영향을 주지 않는다.

---------------------------------------------------------------------------------------------------
매핑 어노테이션 정리

hibernate.hbm2ddl.auto

@Column - 컬럼 매핑

@Temporal - 날짜 타입 매핑

@Enumerated - enum 타입 매핑

@Lob - BLOB, CLOB 매핑

@Transient - 특정 필드를 컬럼에 매핑하지 않음(매핑 무시)



@Column

name - 필드와 매핑할 테이블의 컬럼 이름

insertable, updatable - 등록, 변경 가능 여부

nullable(DDL) - null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약 조건이 붙는다.

unique(DDL) - @Table 의 uniqueConstraints와 같지만 한 컬럼에 간단한 유니크 제약조건을 걸 때 사용

columnDefinition(DDL) - 데이터베이스 컬럼 정보를 직접 줄 수 있다. ex) varchar(100) default 'EMPTY'

length(DDL) - 문자 길이 제약조건, String 타입에만 사용

precision, scale(DDL) - BigDecimal 타입에서 사용 (BigInteger도 사용 가능)
		 - precision은 소수점을 포함해 전체 자릿수를, scale은 소수의 자릿수를 의미
		   double, float 타입에는 적용되지 않음. 아주 큰 숫자 혹은 정밀한 소수를 다룰 때만 사용



@Enumerated

value - EnumType.ORDINAL: enum 순서를 데이터베이스에 저장 (기본값)
          EnumType.STRING: enum 이름을 데이터베이스에 저장

          주의) EnumType.ORDINAL이 기본값이지만 사용하지 않는 편이 좋다.
	     왜냐하면 ORDINAL은 0부터 필드에 수를 매기는 방식이므로 만약 필드의 순서가 바뀌면
	     데이터가 꼬일 수도 있기 때문이다.

@Temporal

날짜 타입(java.util.Date, java.util.Calendar)을 매핑할 때 사용

LocalDate, LocalDateTime을 사용할 시 생략 가능 (최신 하이버네이트에선 지원한다.)



기본 키 매핑 어노테이션

@Id

@GeneratedValue




