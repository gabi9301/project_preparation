양방향 연관관계와 연관관계의 주인

연관관계 매핑을 제대로 하기 위해선 우선 객체와 테이블이 관계를 맺는 방식에
커다란 차이가 있다는 점을 이해해야 한다.

객체의 연관관계는 두 개의 객체가 서로를 가리키는 두 가지 단방향 연관관계로 설명할 수 있다.
ex) A ->B			B -> A

반면 테이블의 연관관계는 상호 테이블 간의 양방향 연관관계 하나로 이루어진다.
ex) A < - > B

테이블의 경우 외래 키 하나로 두 테이블의 연관관계를 관리하며 양쪽으로 조인이 가능하다.

그러나 객체의 경우 두 객체 중 하나로 외래 키를 관리해야만 한다.

****연관관계의 주인(Owner)
양방향 매핑 규칙
- 객체의 두 관계 중 하나를 연관관계의 주인으로 지정한다.

- 연관관계의 주인만이 외래 키를 등록, 수정 가능하다.

- 주인이 아닌 쪽은 조회만 가능하다.

- 주인은 mappedBy 속성을 사용하지 않는다.

- 주인이 아닌 쪽은 mappedBy 속성으로 주인을 지정해주어야 한다.


이 때 연관관계의 주인이 되는 쪽은 외래 키를 가지고 있는 쪽이다. 
즉, 테이블에서 조인을 할 때 사용하는 키를 기본 키가 아닌 외래 키로 가지고 있는 객체가 주인이 된다.
(비즈니스 로직을 기준으로 하는 것이 아니라 외래 키의 위치를 기준으로 연관관계의 주인을 지정)

---양방향 매핑시 주의사항---------------------------------------------------------------------

- 연관관계의 주인에 값을 입력해야 한다. 
  (주인이 아닌 객체는 읽기 전용이므로 여기에만 값을 세팅하면 원하는 값이 아닌 null 값이 DB에 저장된다.)


1. 순수한 객체의 관계를 고려한다면 양쪽 다 값을 설정

2. 연관관계 편의 메소드를 생성

예시)    public void addMember(Member member) {
        member.setTeam(this);
        members.add(member);
    }
양쪽에 편의 메소드를 넣지 말고 1이나 다 둘 중에 한 곳에만 넣는다.



3. 양방향 매핑 시 무한루프 조심
   toString(), lombok, JSON 생성 라이브러리 등을 사용할 때 조심하지 않으면 무한루프에 빠질 수 있다.

가능하면 toString() 이나 lombok을 양방향 매핑 시 사용하지 말 것
JSON 생성 라이브러리의 경우엔 컨트롤러에서 절대 엔티티를 반환하지 말 것
컨트롤러에서 엔티티 자체를 API 스펙으로 반환할 경우, 무한루프의 위험도 있거니와 
엔티티를 변경하는 순간 API의 스펙이 바뀌는 문제가 생기기도 한다.

-->즉 엔티티가 아닌 단순한 DTO 로 반환하는 것을 추천


사실 단방향 매핑만으로 연관관계 매핑은 이미 완료되었다고 볼 수 있으며
양방향 매핑은 반대 방향으로의 조회(객체 그래프 탐색) 기능이 추가된 것 뿐이다.
그러므로 무조건 단방향 매핑으로 초기 설계를 완료해야 한다.
(객체의 입장에서 양방향 매핑은 그다지 메리트가 없다.)

JPQL에서 역방향으로 탐색할 일이 많다.

단방향 매핑을 잘 하고 양방향은 필요할 때 추가해도 무방하다. (테이블에 영향 X)










 