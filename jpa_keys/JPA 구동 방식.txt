JPA 구동 방식

persistence 가 META-INF/persistence.xml 설정 정보를 조회해 EntityManagerFactory 클래스 생성

필요할 때마다 EntityManager를 생성해 사용

Persistence.createEntityManagerFactory(persistenceUnitName: "persistence.xml에 적은 유닛이름")
위 함수는 EntityManagerFactory 객체를 반환한다. 또한 해당 객체가 생성되는 시점에 데이터베이스와
연결되며 createEntityManager 함수를 통해 EntityManager를 생성할 수 있다.

객체와 테이블을 생성 후 매핑하는 과정이 필요

@Entity: JPA과 관리하는 객체라는 의미
@Id: 데이터베이스의 PK와 매핑된다는 의미

EntityManagerFactory는 애플리케이션 로딩 시점에 단 하나만 생성해야 한다.
그리고 트랜잭션 단위마다 EntityManager를 생성하여 사용한다.

관례상 테이블명과 객체명이 같은 경우, 따로 매핑 정보를 주지 않아도 JPA가 자체적으로 매핑하지만
@Entity 어노테이션과 함께 @Table(name="테이블명") 어노테이션을 추가해 뚜렷하게 매핑을 명시
해줄 수 있다.
또한 @Column(name="컬럼명") 어노테이션을 통해 객체의 필드 별로 매핑을 지정해줄 수 있다.

데이터베이스에 저장할 땐

entityManager.persist(객체명);

조회할 땐

entityManager.find(클래스명.class , primaryKey: 찾고자하는 데이터의 키 값);
=>원하는 정보가 담긴 객체를 반환

수정할 땐

원하는 정보가 담긴 객체.수정이 필요한 필드의 Setter(수정될 내용);
------여기서 다시 persist 명령을 내리지 않아도 update쿼리가 실행된다!
------entityManager는 마치 자바 컬렉션을 다루는 것과 유사한 방식으로 다룰 수 있도록 설계됨!
------JPA가 관리하는 엔티티는 트랜젝션을 커밋하기 전 변경 여부를 확인하여 update 쿼리를 실행하므로 따로 persist 명령이 필요없는 것!


삭제할 땐
entityManager.remove(삭제하고자 하는 정보가 담긴 객체);


※ 주의 ※

EntityManagerFactory는 단 하나만 생성하여 애플리케이션 전체에서 공유

EntityManager는 쓰레드간에 공유해선 안되며 요청이 올 때마다 생성하여 사용하고 버림

JPA의 모든 데이터 변경은 트랜젝션 안에서 실행되야 함


단순 저장, 조회, 수정, 삭제가 아니라 좀 더 복잡한 쿼리를 사용해야 한다면

JPQL을 사용한다.

예시) Member 전체 조회

List<Member> result = entityManager.createQuery(qlString="select m from Member as m", Member.class)
		.getResultList();

JPA의 관점에선 쿼리를 작성할 때 절대 DB의 테이블을 대상으로 하지 않으며
객체를 대상으로 한다.
~위 쿼리는 Member의 객체를 모두 가져오라는 의미


이처럼 JPA를 사용 시 엔티티 객체를 중심으로 개발이 이루어지지만
문제는 검색 쿼리...(다양한 JOIN etc)
물론 검색 시에도 테이블이 아닌 엔티티 객체를 대상으로 검색한다.

모든 DB의 데이터를 객체로 변환하여 검색하는 것은 불가능하다..
따라서 애플리케이션에서 필요로 하는 데이터만 DB에서 불러오기 위해선 
검색 조건이 포함된 SQL이 필요한데 이것이 바로 JPQL이다.


JPQL(SQL을 추상화한 객체 지향 쿼리 언어)을 사용하면 다음과 같은 변형이 가능하다.

List<Member> result = entityManager.createQuery(qlString="select m from Member as m", Member.class)
		.setFirstResult(5)	//5번부터
		.setMaxResult(10)	//10개를 불러와라 (페이징)
		.getResultList();


JPQL을 사용해 엔티티 객체를 대상으로 쿼리를 작성할 때 장점은
해당 쿼리가 데이터베이스에 종속적이지 않다는 점이다.
즉, DB의 종류가 바뀌어 방언이 바뀌더라도 쿼리를 수정할 필요가 없다.












