
연관관계 매핑 시 고려해야 할 3가지 사항
- 다중성
- 단방향, 양방향
- 연관관계의 주인


---다중성-----------------------------------------------------------------------------------------

- 다대일: @ManyToOne (가장 많이 사용)
- 일대다: @OneToMany
- 일대일: @OneToOne
- 다대다: @ManyToMany (실무에 적합하지 않음)


---단방향, 양방향-----------------------------------------------------------------------------------------

테이블
- 외래 키 하나로 양쪽 조인 가능
- 방향이라는 개념이 없음

객체
- 참조용 필드가 있는 쪽으로만 참조 가능
- 한쪽만 참조할 시 단방향
- 양쪽이 서로 참조할 시 양방향 (사실 단방향 두 개)



---연관관계의 주인-----------------------------------------------------------------------------------------

- 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음
- 객체 양방향 관계는 A -> B, B -> A 처럼 참조가 두 군데
- 객체 양방향 관계는 참조가 두 군데 있으며 둘 중 테이블의 외래 키를 관리할 곳을 지정해야 함
- 연관관계의 주인 = 외래 키를 관리하는 참조
- 주인의 반대편: 외래 키에 영향을 주지 않으며 단순 조회만 가능




---일대다 단방향-----------------------------------------------------------------------------------------

- 일대다 단방향은 일대다(1 : N)에서 일(1)이 연관관계의 주인이 된다.
- 테이블 일대다 관계의 경우 항상 다(N) 쪽에 외래 키가 있다.
- 객체와 테이블의 차이로 인해 반대편 테이블의 외래 키를 관리하는 특이한 구조
- @JoinColumn을 꼭 사용해야하며 그렇지 않을 시 조인 테이블 방식을 사용한다. (중간에 테이블 하나 추가)

일대다 단방향 매핑 시 단점은
엔티티가 관리하는 외래 키가 다른 테이블에 있다는 점,
연관관계 관리를 위해 추가로 UPDATE SQL이 실행된다는 점
따라서 일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하는 것이 권장된다.

---일대다 양방향-----------------------------------------------------------------------------------------

이러한 매핑은 공식적으로는 존재하지 않지만

@JoinColumn(insertable=false, updatable=false)

위와 같이 읽기 전용 필드를 사용해서 양방향처럼 사용하는 방법은 있다.

--> 가능하면 다대일 양방향을 사용할 것이 권장된다.



