
연관관계 매핑 시 고려해야 할 3가지 사항
- 다중성
- 단방향, 양방향
- 연관관계의 주인


---다중성-----------------------------------------------------------------------------------------

- 다대일: @ManyToOne (가장 많이 사용)
- 일대다: @OneToMany
- 일대일: @OneToOne
- 다대다: @ManyToMany (실무에 적합하지 않음)


---단방향, 양방향-----------------------------------------------------------------------------------------

테이블
- 외래 키 하나로 양쪽 조인 가능
- 방향이라는 개념이 없음

객체
- 참조용 필드가 있는 쪽으로만 참조 가능
- 한쪽만 참조할 시 단방향
- 양쪽이 서로 참조할 시 양방향 (사실 단방향 두 개)



---연관관계의 주인-----------------------------------------------------------------------------------------

- 테이블은 외래 키 하나로 두 테이블이 연관관계를 맺음
- 객체 양방향 관계는 A -> B, B -> A 처럼 참조가 두 군데
- 객체 양방향 관계는 참조가 두 군데 있으며 둘 중 테이블의 외래 키를 관리할 곳을 지정해야 함
- 연관관계의 주인 = 외래 키를 관리하는 참조
- 주인의 반대편: 외래 키에 영향을 주지 않으며 단순 조회만 가능




---일대다 단방향-----------------------------------------------------------------------------------------

- 일대다 단방향은 일대다(1 : N)에서 일(1)이 연관관계의 주인이 된다.
- 테이블 일대다 관계의 경우 항상 다(N) 쪽에 외래 키가 있다.
- 객체와 테이블의 차이로 인해 반대편 테이블의 외래 키를 관리하는 특이한 구조
- @JoinColumn을 꼭 사용해야하며 그렇지 않을 시 조인 테이블 방식을 사용한다. (중간에 테이블 하나 추가)

일대다 단방향 매핑 시 단점은
엔티티가 관리하는 외래 키가 다른 테이블에 있다는 점,
연관관계 관리를 위해 추가로 UPDATE SQL이 실행된다는 점
따라서 일대다 단방향 매핑보다는 다대일 양방향 매핑을 사용하는 것이 권장된다.

---일대다 양방향-----------------------------------------------------------------------------------------

이러한 매핑은 공식적으로는 존재하지 않지만

@JoinColumn(insertable=false, updatable=false)

위와 같이 읽기 전용 필드를 사용해서 양방향처럼 사용하는 방법은 있다.

--> 가능하면 다대일 양방향을 사용할 것이 권장된다.

---일대일 관계-----------------------------------------------------------------------------------------

- 일대일 관계는 그 반대도 일대일
- 주 테이블이나 대상 테이블 중에 외래 키 선택 가능
	- 주 테이블에 외래 키
	- 대상 테이블에 외래 키
- 외래 키에 데이터베이스 유니크(UNI) 제약조건 추가

일대일: 주 테이블에 외래 키 단방향

- 다대일(@ManyToOne) 단방향 매핑과 유사

일대일: 주 테이블에 외래 키 양방향

- 다대일 양방향 매핑 처럼 외래 키가 있는 곳이 연관관계의 주인이다.
- 반대편은 mappedBy를 적용한다.


일대일: 대상 테이블에 외래 키 단방향

- 이러한 단방향 관계는 JPA에서 지원하지 않는다.
- 하지만 양방향 관계는 지원한다.

일대일: 대상 테이블에 외래 키 양방향

- 사실 일대일 주 테이블에 외래 키 양방향과 매핑 방법은 동일하다.

즉 정리하자면

- 주 테이블에 외래 키를 둘 경우
	- 주 객체가 대상 객체의 참조를 가지는 것 처럼 주 테이블에 외래 키를 두고 대상 테이블을 찾는다.
	- 객체지향 개발자들이 선호하는 방식이다.
	- JPA 매핑에 편리하다.
	- 주 테이블만 조회해도 대상 테이블에 데이터가 있는지 여부를 확인할 수 있다는 것이 장점
	- 값이 없으면 외래 키에 null을 허용하게 된다는 것이 단점 (바로 이런 부분을 DBA가 싫어한다..)

- 대상 테이블에 외래 키를 둘 경우
	- 대상 테이블에 외래키가 존재한다.
	- 전통적인 데이터베이스 개발자가 선호하는 방식이다.
	- 주 테이블과 대상 테이블을 일대일에서 일대다 관계로 변경할 때 테이블 구조를 유지할 수 있다는 것이 장점
	- 프록시 기틍의 한계로 인해 지연로딩으로 설정해도 항상 즉시 로딩된다는 것이 단점


---다대다 관계-----------------------------------------------------------------------------------------

- 관계형 데이터베이스는 정규화된 테이블 2개로 다대다 관걔를 표현할 수 없다.
- 연결 테이블을 추가해서 일대다, 다대일 관계로 풀어내야 한다.

객체는 컬렉션을 사용해서 객체 2개로 다대다 관계를 표현할 수 있다.

- @ManyToMany 사용
- @JoinTable로 연결 테이블 지정
- 다대다 매핑: 단방향, 양방향 가능

* 다대다 매핑의 한계
- 편리해보이지만 실무에서는 사용해선 안된다.
- 연결 테이블이 단순히 연결만 하고 끝나지 않는다.
- 주문시간, 수량 같은 데이터가 들어올 수도 있다.

* 다대다 한계 극복
- 연결 테이블용 엔티티를 추가한다.(연결 테이블을 엔티티로 승격한다.)
- @ManyToMany -> @OneToMany, @ManyToOne

