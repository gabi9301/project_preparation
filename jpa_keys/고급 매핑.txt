상속 관계 매핑

- 관계형 데이터베이스는 상속 관계가 없다.
- 슈퍼타입 서브타입 관계라는 모델링 기법이 객체의 상속과 유사하다.
- 상속관계 매핑: 객체의 상속과 구조와 DB의 슈퍼타입 서브타입 관계를 매핑한다.

- 슈퍼타입 서브타입 논리 모델을 실제 물리 모델로 구현하는 세 가지 방법
  1. 각각 테이블로 변환 -> 조인 전략 
  2. 통합 테이블로 변환 -> 단일 테이블 전략 (한 테이블에 모든 필드 다 넣기)
  3. 서브타입 테이블로 변환 -> 구현 클래스마다 테이블 전략 (각각의 테이블에 슈퍼타입 테이블 내 필드를 모두 넣고 동일한 PK 적용)


주요 어노테이션

- @Inheritance(strategy=InheritenceType.XXX)
  - JOINED: 조인 전략
  - SINGLE_TABLE: 단일 테이블 전략 (이게 기본값)
  - TABLE_PER_CLASS: 구현 클래스마다 테이블 전략

- @DiscriminatorColumn(name="DTYPE")
- @DiscriminatorValue("XXX")

단일 테이블 전략의 경우 @DiscriminatorColumm을 따로 지정하지 않아도 자동으로 생긴다.
구현 클래스마다 테이블 전략의 경우, 단순히 데이터를 넣을 때는 좋을 지 몰라도 조회 시 id 하나만 들고있을 때
union을 사용해 관련 테이블 전부를 해당 id로 조회해야하는 문제가 생긴다.

*조인 전략 (조인 전략이 정석)

- 장점
  - 테이블 정규화
  - 외래 키 참조 무결성 제약조건 활용가능
  - 저장공간 효율화

- 단점
  - 조회 시 조인을 많이 사용하여 성능이 떨어짐
  - 조회 쿼리가 복잡함
  - 데이터 저장 시 INSERT 쿼리가 2번 호출 됨

*단일 테이블 전략

- 장점
  - 조인이 필요없어서 일반적으로 조회 성능이 빠름
  - 조회 쿼리가 단순

- 단점
  - 자식 엔티티가 매핑한 컬럼은 모두 null 값을 허용해야 한다.
  - 단일 테이블에 모든 것을 저장하므로 테이블이 커질 수 있고 상황에 따라 조회 성능이 오히려 떨어질 수 있다.

*구현 클래스마다 테이블 전략
- 이 전략은 데이터베이스 설계자와 ORM 전문가 둘 다 추천하지 않는 전략이다.

- 장점
  - 서브 타입을 명확하게 구분해서 처리할 때 효과적이다.
  - not null 제약조건을 사용할 수 있다.

- 단점
  - 여러 자식 테이블과 함께 조회할 때 성능이 떨어짐 (union sql)
  - 자식 테이블을 통합해서 쿼리를 작성하기 어렵다.
(만약에 새로운 테이블이 추가될 경우 상당히 많은 통합용 쿼리를 수정하게 될 수 있다.)


즉, 기본적으로 조인 전략을 베이스로 하되 너무 단순하거나 확장가능성이 없어보이는 경우엔 단일 테이블 전략을 사용할 것


---MappedSuperclass-------------------------------------------------------------------------------------

- 공통 매핑 정보가 필요할 때 사용 (id, name)

- 상속관계를 매핑하는 것이 아님
- 엔티티X, 테이블과 매핑X
- 부모 클래스를 상속 받는 자식 클래스에게 매핑 정보만 제공
- 조회, 검색 불가(em.find(BaseEntity) 불가)
- 직접 생성하여 사용할 일이 없으므로 추상 클래스로 만드는 것이 권장된다.

- 테이블과 관계가 없고 단순히 엔티티가 공통으로 사용하는 매핑 정보를 모으는 역할을 한다.
- 주로 등록일, 수정일, 등록자, 수정자 같은 전체 엔티티에서 공통으로 적용하는 정보를 모을 때 사용된다.
- 참고: @Entity 클래스는 엔티티나 @MappedSupeclass로 지정한 클래스만 상속할 수 있다.






